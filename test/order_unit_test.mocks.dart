// Mocks generated by Mockito 5.4.4 from annotations
// in gemchase_clean_arch/test/order_unit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:gemchase_clean_arch/core/common/exports.dart' as _i5;
import 'package:gemchase_clean_arch/features/order/domain/entities/order_entity.dart'
    as _i6;
import 'package:gemchase_clean_arch/features/order/domain/usecase/order_usecase.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [OrderUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockOrderUseCase extends _i1.Mock implements _i3.OrderUseCase {
  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.OrderEntity>>> getAllOrders() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllOrders,
          [],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, List<_i6.OrderEntity>>>.value(
                _FakeEither_0<_i5.Failure, List<_i6.OrderEntity>>(
          this,
          Invocation.method(
            #getAllOrders,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, List<_i6.OrderEntity>>>.value(
                _FakeEither_0<_i5.Failure, List<_i6.OrderEntity>>(
          this,
          Invocation.method(
            #getAllOrders,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.OrderEntity>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.OrderEntity>> getOrderById(
          String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getOrderById,
          [id],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.OrderEntity>>.value(
            _FakeEither_0<_i5.Failure, _i6.OrderEntity>(
          this,
          Invocation.method(
            #getOrderById,
            [id],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, _i6.OrderEntity>>.value(
                _FakeEither_0<_i5.Failure, _i6.OrderEntity>(
          this,
          Invocation.method(
            #getOrderById,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.OrderEntity>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, bool>> createOrder({
    required String? jewelryId,
    required int? quantity,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createOrder,
          [],
          {
            #jewelryId: jewelryId,
            #quantity: quantity,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, bool>>.value(
            _FakeEither_0<_i5.Failure, bool>(
          this,
          Invocation.method(
            #createOrder,
            [],
            {
              #jewelryId: jewelryId,
              #quantity: quantity,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, bool>>.value(
                _FakeEither_0<_i5.Failure, bool>(
          this,
          Invocation.method(
            #createOrder,
            [],
            {
              #jewelryId: jewelryId,
              #quantity: quantity,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, bool>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, bool>> deleteOrder(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteOrder,
          [id],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, bool>>.value(
            _FakeEither_0<_i5.Failure, bool>(
          this,
          Invocation.method(
            #deleteOrder,
            [id],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, bool>>.value(
                _FakeEither_0<_i5.Failure, bool>(
          this,
          Invocation.method(
            #deleteOrder,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, bool>>);
}
